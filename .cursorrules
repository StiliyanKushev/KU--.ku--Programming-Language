# KU Programming Language - Cursor AI Assistant Rules

## Project Context
This is the KU programming language repository - a complete systems programming language that compiles to x86 32-bit Linux binaries. The project includes a bootstrap compiler (Node.js), standard library, examples, tests, and VS Code extension.

## Context-Specific Rules
Depending on your current task, refer to these specialized rule files:

### üß™ Testing Context
**File**: `.cursorrules-testing`  
**When to use**: Writing tests, debugging test failures, test development
- Compiler testing procedures (`./test.sh -c`)
- Test structure and organization
- Platform-specific testing (Linux/macOS)
- Memory management testing
- CRITICAL: Simulator is deprecated, only use compiler mode

### üöÄ Running Context  
**File**: `.cursorrules-running`  
**When to use**: Compiling programs, execution issues, runtime debugging
- Compilation workflow (`./kulang.sh`)
- Platform differences (Linux native vs macOS Docker)
- Memory management and syscalls
- Interactive application development
- Performance optimization

### üîÑ Workflow Context
**File**: `.cursorrules-workflow`  
**When to use**: Repository management, contributions, code organization
- Git workflow and branching strategy
- Code quality standards
- File organization guidelines
- Pull request and issue management
- Platform compatibility guidelines

## Quick Reference

### Essential Commands
```bash
# Compile and run (Linux)
./kulang.sh program.ku -c -o output && ./output

# Compile and run (macOS) 
./kulang-macos.sh program.ku -c -o output

# Run tests
./test.sh -c          # Linux
./test-macos.sh -c    # macOS

# Debug compilation
./kulang.sh program.ku -a    # Show AST
./kulang.sh program.ku -c -o program -m  # Show assembly
```

### KU Language Essentials
```ku
include "libstd/std.ku"

# Variable declaration
:name/type = value

# Function definition  
function_name:/return_type param1 type1 {
    ret value
}

# Function call
@function_name arg1, arg2

# Basic I/O
@outln "Hello World"
:input/str = @rline
```

## Critical Guidelines

### ‚ö†Ô∏è NEVER Use Simulator
- **DEPRECATED**: `./test.sh -s` and simulator mode
- **ONLY USE**: Compiler mode with `-c` flag
- The interpreter/simulator is broken and non-functional

### üñ•Ô∏è Platform Support
- **Primary**: Linux x86 32-bit (native execution)
- **Secondary**: macOS via Docker + Rosetta 2 (full compatibility)
- **Use**: `kulang-macos.sh` and `test-macos.sh` on macOS

### üìù File Management
- **Track**: `.ku` source files, documentation, tests
- **Ignore**: Compiled binaries, temporary files
- **Examples**: Should demonstrate language features progressively

### üß† Memory Management
- Manual allocation/deallocation required
- String concatenation creates new allocations
- Use mmap/munmap for dynamic memory
- Check for memory leaks in long-running programs

## AI Assistant Priorities

### When Writing KU Code
1. Always include `libstd/std.ku`
2. Use proper type annotations
3. Follow manual memory management principles
4. Test compilation before considering complete
5. Provide working, executable examples

### When Debugging
1. Check compilation first (`-c` mode)
2. Use AST view (`-a`) for syntax issues
3. Use assembly view (`-m`) for generation issues
4. Verify platform-specific execution paths

### When Contributing
1. Create appropriate tests for new features
2. Follow existing code organization patterns
3. Document new functionality clearly
4. Verify cross-platform compatibility
5. Use descriptive commit messages and PR descriptions

## Emergency Procedures

### Broken Compilation
1. Check for syntax errors in KU code
2. Verify all includes are accessible
3. Check bootstrap compiler (Node.js dependencies)
4. Verify system dependencies (NASM, ld)

### Failed Tests
1. Run individual failing test
2. Check expected vs actual output
3. Verify platform compatibility
4. Check for recent changes that might affect test

### Performance Issues
1. Profile memory usage patterns
2. Check for inefficient string operations
3. Review algorithm complexity
4. Consider 32-bit integer limitations

## Project Philosophy
KU is designed as an educational systems programming language that provides:
- Direct hardware/OS interaction via syscalls
- Manual memory management experience
- Compilation to native machine code
- Minimal abstractions for learning
- Cross-platform development (Linux + macOS via Docker)